[1mdiff --git a/xraygui/Form1.cs b/xraygui/Form1.cs[m
[1mindex dffb3c0..d936e12 100644[m
[1m--- a/xraygui/Form1.cs[m
[1m+++ b/xraygui/Form1.cs[m
[36m@@ -23,7 +23,7 @@[m [mnamespace xraygui[m
 [m
 		private Action<byte[]> imageDelegate;[m
 [m
[31m-		private uint[] imageData;[m
[32m+[m		[32mprivate ushort[] imageData;[m
 [m
 		private DebounceDispatcher debounceWindowLevel = new DebounceDispatcher();[m
 [m
[36m@@ -67,7 +67,7 @@[m [mnamespace xraygui[m
 			try[m
 			{[m
 				// We're copying the current imageBytes to a new array because as soon as we return the device will continue to aquire the next image.[m
[31m-				uint[] imageData = new uint[acquire.imageBufferSize];[m
[32m+[m				[32mushort[] imageData = new ushort[acquire.imageBufferSize];[m
 [m
 				Buffer.BlockCopy(acquire.imageBuffer, 0, imageData, 0, acquire.imageBufferSize);[m
 [m
[36m@@ -77,7 +77,7 @@[m [mnamespace xraygui[m
 					DoImageRotation(ref imageData);[m
 					this.imageData = imageData;[m
 [m
[31m-					byte[] imageBytes = Helpers.getBytesFromUint(imageData);[m
[32m+[m					[32mbyte[] imageBytes = Helpers.getBytesFromUshort(imageData);[m
 [m
 					Task.Run(() => UpdateImage(imageBytes));[m
 [m
[36m@@ -92,9 +92,9 @@[m [mnamespace xraygui[m
 			}[m
 		}[m
 [m
[31m-		private void DoImageRotation(ref uint[] imageData)[m
[32m+[m		[32mprivate void DoImageRotation(ref ushort[] imageData)[m
 		{[m
[31m-			var newData = new uint[imageData.Length];[m
[32m+[m			[32mvar newData = new ushort[imageData.Length];[m
 [m
 			int width = (int)acquire.dwColumns;[m
 			int height = (int)acquire.dwRows;[m
[36m@@ -609,13 +609,11 @@[m [mnamespace xraygui[m
 			acquire.GetOffsetImage();[m
 		}[m
 [m
[31m-[m
[31m-[m
 		private void windowLevelChange(object sender, EventArgs e)[m
 		{[m
 			//Debounce half a second.[m
 			debounceWindowLevel.Debounce(500, (obj) => {[m
[31m-				UpdateImage(Helpers.getBytesFromUint(this.imageData));[m
[32m+[m				[32mUpdateImage(Helpers.getBytesFromUshort(this.imageData));[m
 			});[m
 		}[m
 	}[m
[1mdiff --git a/xraylib/Acq.cs b/xraylib/Acq.cs[m
[1mindex ebb3968..3c6891a 100644[m
[1m--- a/xraylib/Acq.cs[m
[1m+++ b/xraylib/Acq.cs[m
[36m@@ -933,7 +933,7 @@[m [mnamespace xraylib[m
         [DllImport("XISL.dll", CharSet = CharSet.Ansi)][m
         public static extern HIS_RETURN Acquisition_CreateGainMap(ref ushort pGainData, ref ushort pGainAVG, int nCount, int nFrame);[m
         [DllImport("XISL.dll", CharSet = CharSet.Ansi)][m
[31m-        public static extern HIS_RETURN Acquisition_CreatePixelMap([In] uint[] pData, uint nDataRows, uint nDataColumns, [In, Out] int[] pCorrList, ref uint nCorrListSize);[m
[32m+[m[32m        public static extern HIS_RETURN Acquisition_CreatePixelMap([In] ushort[] pData, uint nDataRows, uint nDataColumns, [In, Out] int[] pCorrList, ref uint nCorrListSize);[m
 [m
         //        [DllImport("XISL.dll", CharSet = CharSet.Ansi)][m
         //        public static extern HIS_RETURN Acquisition_DoOffsetCorrection(ushort* pSource, ushort* pDest, ushort* pOffsetData, int nCount);[m
[1mdiff --git a/xraylib/AcqController.cs b/xraylib/AcqController.cs[m
[1mindex bcbefdc..522771c 100644[m
[1m--- a/xraylib/AcqController.cs[m
[1m+++ b/xraylib/AcqController.cs[m
[36m@@ -182,6 +182,10 @@[m [mnamespace xraylib[m
                 ex.Trace();[m
             }[m
 [m
[32m+[m[41m            [m
[32m+[m
[32m+[m[41m            [m
[32m+[m
             gainArr = new uint[this.imageBufferSize];[m
             gainHandle = GCHandle.Alloc(offsetArr, GCHandleType.Pinned);[m
 [m
[1mdiff --git a/xraylib/Helpers.cs b/xraylib/Helpers.cs[m
[1mindex 204d45b..9dd377d 100644[m
[1m--- a/xraylib/Helpers.cs[m
[1m+++ b/xraylib/Helpers.cs[m
[36m@@ -54,7 +54,7 @@[m [mnamespace xraylib[m
             [m
         }[m
 [m
[31m-        public static byte[] getBytesFromUint(uint[] data)[m
[32m+[m[32m        public static byte[] getBytesFromUshort(ushort[] data)[m
         {[m
             return data.SelectMany((val) => BitConverter.GetBytes(val)).ToArray();[m
         }[m
